{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Subaerial Drainage System (SaDS) model These pages aim to describe the SaDS model and explain functionally how to run the model and work with its outputs. Summary SaDS models supraglacial meltwater flow in order to calculate the rate of flow into moulins. It does this by following the structure of GlaDS (Werder et al., 2013) . Water flows across the glacier surface in a distributed sheet and through supraglacial rivers. The entire drainage system evolves throughout the melt season depending on the balance between surface melt and heat dissipation in the channels. This documentation For more details about the mathematical basis of the model, see the paper (TBD). The rest of this documentation focuses on the practical aspects of setting up and running the model, and analyzing its outputs. The documentation is organized as follows: Startup : A guide for getting started with the model. Configuration : Details on all possible model parameters, switches, and inputs Tutorial : A hands-on tutorial to run the model","title":"Home"},{"location":"#the-subaerial-drainage-system-sads-model","text":"These pages aim to describe the SaDS model and explain functionally how to run the model and work with its outputs.","title":"The Subaerial Drainage System (SaDS) model"},{"location":"#summary","text":"SaDS models supraglacial meltwater flow in order to calculate the rate of flow into moulins. It does this by following the structure of GlaDS (Werder et al., 2013) . Water flows across the glacier surface in a distributed sheet and through supraglacial rivers. The entire drainage system evolves throughout the melt season depending on the balance between surface melt and heat dissipation in the channels.","title":"Summary"},{"location":"#this-documentation","text":"For more details about the mathematical basis of the model, see the paper (TBD). The rest of this documentation focuses on the practical aspects of setting up and running the model, and analyzing its outputs. The documentation is organized as follows: Startup : A guide for getting started with the model. Configuration : Details on all possible model parameters, switches, and inputs Tutorial : A hands-on tutorial to run the model","title":"This documentation"},{"location":"configuration/","text":"Model configuration This page describes the configuration options available. These options are all specified in a simple structure (let's call it params ). Most of these options are set by the get_default_params function, and they are documented reasonably well within that function. Specifying your domain and forcing Specify melt rates (in m w.e./year) as function handles with a call signature melt(t) , and provide moulin locations with fields: Name Size Description ms n_elements x 1 Sheet melt rate mc n_edges x 1 Channel melt rate msc n_edges x 1 Sheet melt rate interpolated to edges, used to lower channel lips moulins n_nodes x 1 Indices of nodes with moulins You must set this forcing yourself since the model has no way of predicting what forcing you want. Moulins are specified as a sparse array (or full array) that is zero where there is no moulin and 1 when there is a moulin at that node. Initial conditions Initial conditions are specified in a structure Y0 with fields Name Size Description hs n_elements x 1 Sheet water depth zs n_elements x 1 Sheet elevation hc n_edges x 1 Channel water depth Hc n_edges x 1 Channel incision depth (set >0 to avoid NaN ) phic n_edges x 1 Channel potential Vm n_moulins x 1 Moulin storage You must set these initial conditions yourself. Note that the moulin storage ( Vm ) is just used to keep track of the total volume transferred through moulins, unlike in GlaDS where the englacial storage is an important part of the model formulation. Time setpping You must provide the time span to run the model for with the field params.tt . This gives the times you want model outputs for, NOT the timestep of the model (see params.solver_opts below). Default values SaDS has an extensive list of input parameters and options to configure your model runs. The table below lists the parameters, default values, and some notes about changing their values. Parameters are changable as params.Name , where Name is the name given in the tables below. Tunable parameters These are physical parameters that you can tune to adjust the model's behaviour (in contrast to physical constants that should not be changed). Name Default Value Description Notes alphac 5/3 Channel flow exponent betac 3/2 Channel flow exponent kc 10 Channel hydraulic conductivity alphas 5/4 Sheet flow exponent betas 3/2 Sheet flow exponent ks 0.5 Sheet hydraulic conductivity r 3 Ratio of channel width to incision depth Hmin 1e-3 Minimum incision depth before channel melts at same rate as sheet. exchange_ratio 0.2 Channel exchange ratio. Switches These options turn on and off features or switch between different methods. Name Default Value Other choices Description Notes exchange true false Choose whether to allow mass exchange between sheet and channels model coupled sheet , channel Choose whether to run full (coupled) model, or sheet-only or channel-only. Xi_s true false Heat dissipation in sheets. Set to 0 for no heat dissipation, 1 to allow dissipation. overwrite false true Overwrite existing output files. If false and a file exists, append the time to the end of the filename. stop_on_warning false true Switch to raise an error if parameter validation fails Solver parameters These options change the numerical ODE solver or control its behaviour. Name Default Value Description Notes solver odeRK Which ODE solver function to use. Could also be ode45 , or any other Matlab solver. odeRK runs the best. solver_opts Options needed for solvers. For odeRK , this needs to have the timestep as field dt Output fields The model lets you choose which fields to save: Field Description dhsdt Time derivative of water sheet thickness dhsdt_div Divergence term of water sheet thickness time derivative dhcdt Time derivative of channel depth dhcdt_area Area-change component of channel depth rate of change dhcdt_div Divergence component of channel depth rate of change dHcdt Time derivative of channel incision depth phis_x Sheet potential gradient x-component phis_y Sheet potential gradient y-component qx_sheet Sheet flow in x-direction qy_sheet Sheet flow in y-direction dphic_ds Channel potential slope qc Channel volume flow phic_node Potential on nodes Xi_c Potential energy dissipation exchange_frac Exchange fraction m_moulin Moulin input rates","title":"Configuration"},{"location":"configuration/#model-configuration","text":"This page describes the configuration options available. These options are all specified in a simple structure (let's call it params ). Most of these options are set by the get_default_params function, and they are documented reasonably well within that function.","title":"Model configuration"},{"location":"configuration/#specifying-your-domain-and-forcing","text":"Specify melt rates (in m w.e./year) as function handles with a call signature melt(t) , and provide moulin locations with fields: Name Size Description ms n_elements x 1 Sheet melt rate mc n_edges x 1 Channel melt rate msc n_edges x 1 Sheet melt rate interpolated to edges, used to lower channel lips moulins n_nodes x 1 Indices of nodes with moulins You must set this forcing yourself since the model has no way of predicting what forcing you want. Moulins are specified as a sparse array (or full array) that is zero where there is no moulin and 1 when there is a moulin at that node.","title":"Specifying your domain and forcing"},{"location":"configuration/#initial-conditions","text":"Initial conditions are specified in a structure Y0 with fields Name Size Description hs n_elements x 1 Sheet water depth zs n_elements x 1 Sheet elevation hc n_edges x 1 Channel water depth Hc n_edges x 1 Channel incision depth (set >0 to avoid NaN ) phic n_edges x 1 Channel potential Vm n_moulins x 1 Moulin storage You must set these initial conditions yourself. Note that the moulin storage ( Vm ) is just used to keep track of the total volume transferred through moulins, unlike in GlaDS where the englacial storage is an important part of the model formulation.","title":"Initial conditions"},{"location":"configuration/#time-setpping","text":"You must provide the time span to run the model for with the field params.tt . This gives the times you want model outputs for, NOT the timestep of the model (see params.solver_opts below).","title":"Time setpping"},{"location":"configuration/#default-values","text":"SaDS has an extensive list of input parameters and options to configure your model runs. The table below lists the parameters, default values, and some notes about changing their values. Parameters are changable as params.Name , where Name is the name given in the tables below. Tunable parameters These are physical parameters that you can tune to adjust the model's behaviour (in contrast to physical constants that should not be changed). Name Default Value Description Notes alphac 5/3 Channel flow exponent betac 3/2 Channel flow exponent kc 10 Channel hydraulic conductivity alphas 5/4 Sheet flow exponent betas 3/2 Sheet flow exponent ks 0.5 Sheet hydraulic conductivity r 3 Ratio of channel width to incision depth Hmin 1e-3 Minimum incision depth before channel melts at same rate as sheet. exchange_ratio 0.2 Channel exchange ratio. Switches These options turn on and off features or switch between different methods. Name Default Value Other choices Description Notes exchange true false Choose whether to allow mass exchange between sheet and channels model coupled sheet , channel Choose whether to run full (coupled) model, or sheet-only or channel-only. Xi_s true false Heat dissipation in sheets. Set to 0 for no heat dissipation, 1 to allow dissipation. overwrite false true Overwrite existing output files. If false and a file exists, append the time to the end of the filename. stop_on_warning false true Switch to raise an error if parameter validation fails Solver parameters These options change the numerical ODE solver or control its behaviour. Name Default Value Description Notes solver odeRK Which ODE solver function to use. Could also be ode45 , or any other Matlab solver. odeRK runs the best. solver_opts Options needed for solvers. For odeRK , this needs to have the timestep as field dt Output fields The model lets you choose which fields to save: Field Description dhsdt Time derivative of water sheet thickness dhsdt_div Divergence term of water sheet thickness time derivative dhcdt Time derivative of channel depth dhcdt_area Area-change component of channel depth rate of change dhcdt_div Divergence component of channel depth rate of change dHcdt Time derivative of channel incision depth phis_x Sheet potential gradient x-component phis_y Sheet potential gradient y-component qx_sheet Sheet flow in x-direction qy_sheet Sheet flow in y-direction dphic_ds Channel potential slope qc Channel volume flow phic_node Potential on nodes Xi_c Potential energy dissipation exchange_frac Exchange fraction m_moulin Moulin input rates","title":"Default values"},{"location":"startup/","text":"Startup guide This guide will take you through downloading the model's code and getting set up to run the model. Once you get through this section you should have everything you need to follow along with the tutorial . Requirements The model is written in MATLAB so you will need a license. If you are in Applied Mathematics, you can get a license from the department by emailing the AM Grad email (this is true as of June 2021). Otherwise, Christine can purchase a license for you. You don't need to know much about MATLAB to run this model, and the analysis can be straightforward enough. Downloading and installing The code is hosted on our GitHub group here . This means you will first need to become a member of the group. If you are not a member, ask Christine to add you. Clone the code to a reasonable place (the code is small enough to work with locally, but can also be run on the Compute Canada (or other) servers): git clone https://github.com/uwglacier/SaDS.git You may have to follow the instructions in the Triangle package's README file (in the mattri/triangle/ directory) to compile it for your system. Edit the set_paths.m file in the root directory to match the packages you have and your file paths. That should be all that you need to do! A note about the Compute Canada servers This model is very easy to run on the compute canada severs. All you need to do is module load StdEnv/2020 and module load matlab/2020b (or your preferred version). Now is a good time to go through the tutorial to make sure everything works.","title":"Startup guide"},{"location":"startup/#startup-guide","text":"This guide will take you through downloading the model's code and getting set up to run the model. Once you get through this section you should have everything you need to follow along with the tutorial .","title":"Startup guide"},{"location":"startup/#requirements","text":"The model is written in MATLAB so you will need a license. If you are in Applied Mathematics, you can get a license from the department by emailing the AM Grad email (this is true as of June 2021). Otherwise, Christine can purchase a license for you. You don't need to know much about MATLAB to run this model, and the analysis can be straightforward enough.","title":"Requirements"},{"location":"startup/#downloading-and-installing","text":"The code is hosted on our GitHub group here . This means you will first need to become a member of the group. If you are not a member, ask Christine to add you. Clone the code to a reasonable place (the code is small enough to work with locally, but can also be run on the Compute Canada (or other) servers): git clone https://github.com/uwglacier/SaDS.git You may have to follow the instructions in the Triangle package's README file (in the mattri/triangle/ directory) to compile it for your system. Edit the set_paths.m file in the root directory to match the packages you have and your file paths. That should be all that you need to do!","title":"Downloading and installing"},{"location":"startup/#a-note-about-the-compute-canada-servers","text":"This model is very easy to run on the compute canada severs. All you need to do is module load StdEnv/2020 and module load matlab/2020b (or your preferred version). Now is a good time to go through the tutorial to make sure everything works.","title":"A note about the Compute Canada servers"},{"location":"tutorial/","text":"Tutorial This tutorial takes you through running a simple case using synthetic geometry and forcing. This tutorial is based in the tests/SHMIP/ directory. There's a handful of MATLAB files here, so it's useful to talk about what each does: get_baseline_setup.m sets most of the parameters for the simulation. shmip_elevation.m calculates the surface elevation for the provided coordinate matrix shmip_melt.m calculates surface melt using the SHMIP melt parameterization. plot_forcing.m plots the SHMIP melt forcing spinup_baseline. : This script runs the \"spinup\" simulation. Since SaDS builds a supraglacial river network, it's convenient to run the model for a short time (e.g. 12 hours) with spatially uniform channel dimensions to get an estimate of how much flow is through each edge in the mesh. run_test.m : This script is that actually runs the SaDS model. Take a look in it - it doesn't do that much actually since the parameters are set by a different function. It uses the results of the spinup_baseline.m script to calculate initial channel dimensions. pickup_HC.m is a helper function that calculates the channel incision depth for the run_test.m script. The data/ folder holds a text file providing moulin locations and the test_mesh.mat file with the triangular mesh. Note that this case takes some time to run so it might be more convenient to run it on a Compute Canada machine. Step 1: Run the spinup case As mentioned above, we run the model for 12 hours with a spatially uniform channel network to get an approximation of the steady state flow through the channels. First, make sure you have a directory outputs/ . This is where the model outputs will be saved. Now, open the file spinup_baseline.m . This script runs the spinup simulation. See how most of the parameters and initial conditions are set by the get_baseline_setup.m function. Doing it this way ensures that the spinup and actual simulations use the same parameters. Take a look at this function to see what it does. You should be able to run the spinup case now! If you are running locally (on your own computer as opposed to a Compute Canada machine), just run the script using MATLAB as usual. It only takes a few minutes to run. If you are on a Compute Canada machine, submit the submit_spinup.sh script: sbatch submit_spinup.sh Step 2: Run the actual simulation Now we can run the actual simulation. As with the spinup case, look at the script run_test.m to see what it does. Now, run it using the SLURM script submit_test.sh or as usual if you are running locally. Note this case takes longer to run (up to 30 minutes) so you may want to do it on the Compute Canada machines. Setup 3: Understand the outputs While the model is running, you'll notice it produces outputs on the screen (or in the log file) tha t look like >> spinup_baseline Using RK time stepping [ ] (t_model = 15724800.000000, t_wall = 0.515082, AbsConv = 0.000228) [. ] (t_model = 15728400.000000, t_wall = 11.874495, AbsConv = 0.027170) [.. ] (t_model = 15732000.000000, t_wall = 23.229882, AbsConv = 0.086851) [... ] (t_model = 15735600.000000, t_wall = 34.564978, AbsConv = 0.073070) [.... ] (t_model = 15739200.000000, t_wall = 46.411199, AbsConv = 0.088599) [..... ] (t_model = 15742800.000000, t_wall = 57.860533, AbsConv = 0.137125) [...... ] (t_model = 15746400.000000, t_wall = 69.210069, AbsConv = 0.138315) [....... ] (t_model = 15750000.000000, t_wall = 80.684014, AbsConv = 0.160151) [........ ] (t_model = 15753600.000000, t_wall = 92.567800, AbsConv = 0.257627) [......... ] (t_model = 15757200.000000, t_wall = 103.861314, AbsConv = 0.197309) [.......... ] (t_model = 15760800.000000, t_wall = 115.075304, AbsConv = 0.218257) [........... ] (t_model = 15764400.000000, t_wall = 126.539341, AbsConv = 0.230892) [.............] (t_model = 15768000.000000, t_wall = 138.402231, AbsConv = 0.231452) This provides information on: t_model : The timestep (in seconds) the model is currently on. This lets you measure the model's progress. The progress is also visualized with the dots within the square brackets. t_wall : The walltime (in seconds) since the model was started. AbsConv : This is the maximum absolute value of the time derivative of water depth multiplied by the timestep. Essentally, this is how much the water depth is changing within a single timestep. This lets you monitor how well it is doing with the timestep you have chosen. Step 4: Analyze the outputs Look through the script analyze_outputs.m to see what it does. The element_plot and edge_plot functions are really just interfaces to MATLAB plotting functions but they make your life easy dealing with this weird triangular mesh data. For the most part, you will be using these functions along with standard line plots to visualize your outputs. You should end up with beautiful figures like:","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This tutorial takes you through running a simple case using synthetic geometry and forcing. This tutorial is based in the tests/SHMIP/ directory. There's a handful of MATLAB files here, so it's useful to talk about what each does: get_baseline_setup.m sets most of the parameters for the simulation. shmip_elevation.m calculates the surface elevation for the provided coordinate matrix shmip_melt.m calculates surface melt using the SHMIP melt parameterization. plot_forcing.m plots the SHMIP melt forcing spinup_baseline. : This script runs the \"spinup\" simulation. Since SaDS builds a supraglacial river network, it's convenient to run the model for a short time (e.g. 12 hours) with spatially uniform channel dimensions to get an estimate of how much flow is through each edge in the mesh. run_test.m : This script is that actually runs the SaDS model. Take a look in it - it doesn't do that much actually since the parameters are set by a different function. It uses the results of the spinup_baseline.m script to calculate initial channel dimensions. pickup_HC.m is a helper function that calculates the channel incision depth for the run_test.m script. The data/ folder holds a text file providing moulin locations and the test_mesh.mat file with the triangular mesh. Note that this case takes some time to run so it might be more convenient to run it on a Compute Canada machine.","title":"Tutorial"},{"location":"tutorial/#step-1-run-the-spinup-case","text":"As mentioned above, we run the model for 12 hours with a spatially uniform channel network to get an approximation of the steady state flow through the channels. First, make sure you have a directory outputs/ . This is where the model outputs will be saved. Now, open the file spinup_baseline.m . This script runs the spinup simulation. See how most of the parameters and initial conditions are set by the get_baseline_setup.m function. Doing it this way ensures that the spinup and actual simulations use the same parameters. Take a look at this function to see what it does. You should be able to run the spinup case now! If you are running locally (on your own computer as opposed to a Compute Canada machine), just run the script using MATLAB as usual. It only takes a few minutes to run. If you are on a Compute Canada machine, submit the submit_spinup.sh script: sbatch submit_spinup.sh","title":"Step 1: Run the spinup case"},{"location":"tutorial/#step-2-run-the-actual-simulation","text":"Now we can run the actual simulation. As with the spinup case, look at the script run_test.m to see what it does. Now, run it using the SLURM script submit_test.sh or as usual if you are running locally. Note this case takes longer to run (up to 30 minutes) so you may want to do it on the Compute Canada machines.","title":"Step 2: Run the actual simulation"},{"location":"tutorial/#setup-3-understand-the-outputs","text":"While the model is running, you'll notice it produces outputs on the screen (or in the log file) tha t look like >> spinup_baseline Using RK time stepping [ ] (t_model = 15724800.000000, t_wall = 0.515082, AbsConv = 0.000228) [. ] (t_model = 15728400.000000, t_wall = 11.874495, AbsConv = 0.027170) [.. ] (t_model = 15732000.000000, t_wall = 23.229882, AbsConv = 0.086851) [... ] (t_model = 15735600.000000, t_wall = 34.564978, AbsConv = 0.073070) [.... ] (t_model = 15739200.000000, t_wall = 46.411199, AbsConv = 0.088599) [..... ] (t_model = 15742800.000000, t_wall = 57.860533, AbsConv = 0.137125) [...... ] (t_model = 15746400.000000, t_wall = 69.210069, AbsConv = 0.138315) [....... ] (t_model = 15750000.000000, t_wall = 80.684014, AbsConv = 0.160151) [........ ] (t_model = 15753600.000000, t_wall = 92.567800, AbsConv = 0.257627) [......... ] (t_model = 15757200.000000, t_wall = 103.861314, AbsConv = 0.197309) [.......... ] (t_model = 15760800.000000, t_wall = 115.075304, AbsConv = 0.218257) [........... ] (t_model = 15764400.000000, t_wall = 126.539341, AbsConv = 0.230892) [.............] (t_model = 15768000.000000, t_wall = 138.402231, AbsConv = 0.231452) This provides information on: t_model : The timestep (in seconds) the model is currently on. This lets you measure the model's progress. The progress is also visualized with the dots within the square brackets. t_wall : The walltime (in seconds) since the model was started. AbsConv : This is the maximum absolute value of the time derivative of water depth multiplied by the timestep. Essentally, this is how much the water depth is changing within a single timestep. This lets you monitor how well it is doing with the timestep you have chosen.","title":"Setup 3: Understand the outputs"},{"location":"tutorial/#step-4-analyze-the-outputs","text":"Look through the script analyze_outputs.m to see what it does. The element_plot and edge_plot functions are really just interfaces to MATLAB plotting functions but they make your life easy dealing with this weird triangular mesh data. For the most part, you will be using these functions along with standard line plots to visualize your outputs. You should end up with beautiful figures like:","title":"Step 4: Analyze the outputs"}]}